//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameClient_12._01._2020.GameServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOtherUsersGameInfo", ReplyAction="http://tempuri.org/IService/GetOtherUsersGameInfoResponse")]
        System.Data.DataTable GetOtherUsersGameInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOtherUsersGameInfo", ReplyAction="http://tempuri.org/IService/GetOtherUsersGameInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetOtherUsersGameInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPropertiesInfo", ReplyAction="http://tempuri.org/IService/SendPropertiesInfoResponse")]
        void SendPropertiesInfo(int waveID, bool won, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPropertiesInfo", ReplyAction="http://tempuri.org/IService/SendPropertiesInfoResponse")]
        System.Threading.Tasks.Task SendPropertiesInfoAsync(int waveID, bool won, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPropertiesInfoByFullInfo", ReplyAction="http://tempuri.org/IService/SendPropertiesInfoByFullInfoResponse")]
        void SendPropertiesInfoByFullInfo(int PropertiesID, int waveID, int numWin, int numLost, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPropertiesInfoByFullInfo", ReplyAction="http://tempuri.org/IService/SendPropertiesInfoByFullInfoResponse")]
        System.Threading.Tasks.Task SendPropertiesInfoByFullInfoAsync(int PropertiesID, int waveID, int numWin, int numLost, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : GameClient_12._01._2020.GameServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<GameClient_12._01._2020.GameServiceReference.IService>, GameClient_12._01._2020.GameServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetOtherUsersGameInfo() {
            return base.Channel.GetOtherUsersGameInfo();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetOtherUsersGameInfoAsync() {
            return base.Channel.GetOtherUsersGameInfoAsync();
        }
        
        public void SendPropertiesInfo(int waveID, bool won, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers) {
            base.Channel.SendPropertiesInfo(waveID, won, numbersOfWaterTowers, numbersOfFireTowers, numbersOfAirTowers, numbersOfEarthTowers);
        }
        
        public System.Threading.Tasks.Task SendPropertiesInfoAsync(int waveID, bool won, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers) {
            return base.Channel.SendPropertiesInfoAsync(waveID, won, numbersOfWaterTowers, numbersOfFireTowers, numbersOfAirTowers, numbersOfEarthTowers);
        }
        
        public void SendPropertiesInfoByFullInfo(int PropertiesID, int waveID, int numWin, int numLost, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers) {
            base.Channel.SendPropertiesInfoByFullInfo(PropertiesID, waveID, numWin, numLost, numbersOfWaterTowers, numbersOfFireTowers, numbersOfAirTowers, numbersOfEarthTowers);
        }
        
        public System.Threading.Tasks.Task SendPropertiesInfoByFullInfoAsync(int PropertiesID, int waveID, int numWin, int numLost, int numbersOfWaterTowers, int numbersOfFireTowers, int numbersOfAirTowers, int numbersOfEarthTowers) {
            return base.Channel.SendPropertiesInfoByFullInfoAsync(PropertiesID, waveID, numWin, numLost, numbersOfWaterTowers, numbersOfFireTowers, numbersOfAirTowers, numbersOfEarthTowers);
        }
    }
}
